// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: task.proto

package taskpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Taskservice_CreateTask_FullMethodName = "/Taskservice/CreateTask"
	Taskservice_GetTask_FullMethodName    = "/Taskservice/GetTask"
	Taskservice_UpdateTask_FullMethodName = "/Taskservice/UpdateTask"
	Taskservice_DeleteTask_FullMethodName = "/Taskservice/DeleteTask"
)

// TaskserviceClient is the client API for Taskservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskserviceClient interface {
	CreateTask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Responce, error)
	GetTask(ctx context.Context, in *Responce, opts ...grpc.CallOption) (*Task, error)
	UpdateTask(ctx context.Context, in *Responce, opts ...grpc.CallOption) (*UserRequest, error)
	DeleteTask(ctx context.Context, in *Responce, opts ...grpc.CallOption) (*UserRequest, error)
}

type taskserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskserviceClient(cc grpc.ClientConnInterface) TaskserviceClient {
	return &taskserviceClient{cc}
}

func (c *taskserviceClient) CreateTask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Responce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Responce)
	err := c.cc.Invoke(ctx, Taskservice_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskserviceClient) GetTask(ctx context.Context, in *Responce, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, Taskservice_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskserviceClient) UpdateTask(ctx context.Context, in *Responce, opts ...grpc.CallOption) (*UserRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRequest)
	err := c.cc.Invoke(ctx, Taskservice_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskserviceClient) DeleteTask(ctx context.Context, in *Responce, opts ...grpc.CallOption) (*UserRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRequest)
	err := c.cc.Invoke(ctx, Taskservice_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskserviceServer is the server API for Taskservice service.
// All implementations must embed UnimplementedTaskserviceServer
// for forward compatibility
type TaskserviceServer interface {
	CreateTask(context.Context, *Request) (*Responce, error)
	GetTask(context.Context, *Responce) (*Task, error)
	UpdateTask(context.Context, *Responce) (*UserRequest, error)
	DeleteTask(context.Context, *Responce) (*UserRequest, error)
	mustEmbedUnimplementedTaskserviceServer()
}

// UnimplementedTaskserviceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskserviceServer struct {
}

func (UnimplementedTaskserviceServer) CreateTask(context.Context, *Request) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskserviceServer) GetTask(context.Context, *Responce) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskserviceServer) UpdateTask(context.Context, *Responce) (*UserRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskserviceServer) DeleteTask(context.Context, *Responce) (*UserRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskserviceServer) mustEmbedUnimplementedTaskserviceServer() {}

// UnsafeTaskserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskserviceServer will
// result in compilation errors.
type UnsafeTaskserviceServer interface {
	mustEmbedUnimplementedTaskserviceServer()
}

func RegisterTaskserviceServer(s grpc.ServiceRegistrar, srv TaskserviceServer) {
	s.RegisterService(&Taskservice_ServiceDesc, srv)
}

func _Taskservice_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskserviceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskservice_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskserviceServer).CreateTask(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskservice_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Responce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskserviceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskservice_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskserviceServer).GetTask(ctx, req.(*Responce))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskservice_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Responce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskserviceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskservice_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskserviceServer).UpdateTask(ctx, req.(*Responce))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskservice_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Responce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskserviceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskservice_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskserviceServer).DeleteTask(ctx, req.(*Responce))
	}
	return interceptor(ctx, in, info, handler)
}

// Taskservice_ServiceDesc is the grpc.ServiceDesc for Taskservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taskservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Taskservice",
	HandlerType: (*TaskserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Taskservice_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Taskservice_GetTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Taskservice_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Taskservice_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
